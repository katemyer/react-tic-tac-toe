{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","onClick","onClickCallback","id","className","value","Board","squareList","squares","listofsquares","row","length","col","push","generateSquareComponents","console","log","generateSquares","currentId","App","useState","setSquares","currentPlayer","setCurrentPlayer","currentWinner","setCurrentWinner","checkForWinner","winner","isSquaresFilled","squaresflat","concat","i","copySquares","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fcf21125.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'; \n\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n  \n\n  return <button onClick={() => {props.onClickCallback(props.id)}} className=\"square\">\n    {props.value}\n  </button>\n}\n\n\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n// description: generate list of Square Components\n// param squares : 2d array\n// param onClickCallback : callback function\n// returns listofsquares : list of Square Components\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  //squares is a 2D array\n  //create an array\n  let listofsquares = []\n  //populate rows by looping through rows based on squares.length\n  for (let row = 0; row < squares.length; row += 1) {\n    //populate colums by looping through columns based on squares\n    for (let col = 0; col < squares[0].length; col += 1) {\n      //push Square component coming from Square.js into listofsquares array\n          //Square comp needs id, value, and onClickCallback\n          //set Square components .proptypes bc Square.js requires this\n          let id=squares[row][col].id\n          let value=squares[row][col].value\n      listofsquares.push(<Square id={id} value={value} onClickCallback={onClickCallback}/>)\n    }\n  }\n\n\n  //return \n  return listofsquares\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n  //useState here when need to impact the UI and to re-render\n  //https://github.com/Ada-Developers-Academy/textbook-curriculum/blob/master/React/events.md\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n  const [currentWinner, setCurrentWinner] = useState(null);\n\n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n\n  const onClickCallback = (id) => {\n    //check if a winner is set\n    if (currentWinner !== null){\n      //if there is a winner, break therefore do not update squares\n      return;\n    }\n    // id is the id of the square that is being updated\n    // find the id in squares\n    //id = 8 = squares[2][2].id\n    //console.log(id)\n    // https://stackoverflow.com/questions/42037369/how-to-edit-an-item-in-a-state-array\n    const copySquares = squares.slice()\n    for (let row = 0; row < copySquares.length; row += 1) {\n      for (let col = 0; col < copySquares[0].length; col += 1) {\n        let currentId=copySquares[row][col].id\n        //check if ids match\n        if (id === currentId) {\n          //check if value is not empty, prevent being overriden\n          if (copySquares[row][col].value !== '') return;\n          // update the value of the square to currentPlayer\n          copySquares[row][col].value = currentPlayer\n          // update squares = set and refresh page\n          setSquares(copySquares)\n          // after updating board, check for win\n          console.log(checkForWinner())\n          //then check is board is filled\n          console.log(`is filled ${isSquaresFilled()}`)\n          // set to next player\n          if (currentPlayer===PLAYER_1) {\n            setCurrentPlayer(PLAYER_2)\n          }\n          else {\n            setCurrentPlayer(PLAYER_1)\n          }\n          return;\n        }\n      }\n    }\n  };\n\n  const checkForWinner = () => {\n    // Complete in Wave 3\n    //check for row winners, example = 'ooo'\n    //loop through each row\n    let winner = null\n    for (let row = 0; row < squares.length; row += 1){\n      //check if each column in this row equals one another\n      if (squares[row][0].value === squares[row][1].value && squares[row][0].value === squares[row][2].value && squares[row][0].value !== ''){\n        //if true, winner based on value, ex: x\n        winner = squares[row][2].value;\n        //update squares = set and refresh page and checking for winner\n        setCurrentWinner(winner)\n        //stop evaluating other combinations, return winner\n        return winner \n      }\n    }\n    //check column winners\n    for (let col = 0; col < 3; col += 1) {\n      //check if each row in this colum equals one another\n        if(squares[0][col].value === squares[1][col].value && squares[0][col].value === squares[2][col].value && squares[0][col].value !== ''){\n          //if true, winner based on value\n          winner = squares[0][col].value;\n          //update squares to set and refresh page to check for winner\n          setCurrentWinner(winner)\n          return winner\n        }\n    }\n    //check diagonal winner\n    if (squares[0][0].value === squares[1][1].value \n      && squares[2][2].value === squares[0][0].value \n      && squares[0][0].value !== ''){\n      winner = squares[0][0].value;\n      setCurrentWinner(winner)\n      return winner\n    }\n    else if (squares[2][0].value === squares[1][1].value \n      && squares[0][2].value === squares[2][0].value \n      && squares[2][0].value !== ''){\n      winner = squares[2][0].value;\n      setCurrentWinner(winner)\n      return winner\n    }\n    //check ties\n    //if all squares are filled, there are no winners\n    if (isSquaresFilled() && winner === null) {\n      setCurrentWinner('no winner, tied')\n    }\n    return winner\n  }\n\n  \n  const isSquaresFilled = () => {\n    let isFilled = true;\n    //turn squares array from 2d to 1d:https://stackoverflow.com/questions/14824283/convert-a-2d-javascript-array-to-a-1d-array\n    let squaresflat = [].concat(...squares);\n    //loop through squares \n    for (let i in squaresflat) {\n      let square = squaresflat[i];\n       //check if value is ''\n       if (square.value === ''){\n        //if true, there is a value\n        return false;\n      }\n    }\n    return isFilled\n  }\n\n\n  const onClickResetGame = () => {\n    // Complete in Wave 4: resetting all states\n    // reset setSquares to default generateSquares());\n    setSquares(generateSquares())\n    //reset setcurrentPlayer to default PLAYER_1\n    setCurrentPlayer(PLAYER_1)\n    //reset currentWinner\n    setCurrentWinner(null)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>The winner is {currentWinner} </h2>\n        <h3> Current Player {currentPlayer} </h3>\n        <button onClick={onClickResetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={onClickCallback} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}